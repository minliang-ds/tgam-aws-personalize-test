AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  GitHubOwner:
    Type: String
    Default: "globeandmail"

  GitHubRepo:
    Type: String
    Default: " tgam-aws-personalize"

  GitHubBranch:
    Type: String
    Default: "development"

  ResourcesPrefix:
    Type: String
    Default: "tgam-personalize"
    AllowedPattern: "[A-Za-z0-9-_]+"

  PipelineType:
    Type: String
    Default: "mlops"
    AllowedValues:
      - "mlops"
      - "api"

  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - "dev"
      - "stg"
      - "prod"

  ManagedBy:
    Type: String
    Default: "CloudFormation"
    AllowedValues:
      - "CloudFormation"

  CostAllocationProduct:
    Type: String
    Default: "amazon_personalize"
    AllowedValues:
      - "amazon_personalize"

  Email:
    Type: String
    Default: "noreply@example.com"

  DevGlueSourceBucket:
    Type: String
    Default: "tgam-personalize-dev-1950aa20"


Mappings:
  TypePath:
    api:
      Path: "api"
    mlops:
      Path: "mlops/personalize-step-functions"

Conditions:
  IsPipelineApprovalStageCondition: !Equals [!Ref Environment, 'prod']
  IsPipelineTypeApi: !Equals [!Ref PipelineType, 'api']


Resources:
  PipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: "Ignore access logs for S3 bucket"
          - id: W51
            reason: "Ignore need for bucket policy"

    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
            BucketKeyEnabled: true
      BucketName: !Join
        - "-"
        - - !Ref ResourcesPrefix
          - !Ref PipelineType
          - !Ref Environment
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "CostAllocationProduct"
          Value: !Ref CostAllocationProduct
        - Key: "ManagedBy"
          Value: !Ref ManagedBy
        - Key: "Versioning"
          Value: "Enabled"
      VersioningConfiguration:
        Status: Enabled
    
  CodeBuildLogs:    
    Type: AWS::Logs::LogGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: "CFN build logs do not need encryption at rest"
    Properties: 
      LogGroupName: !Join
        - "-"
        - - !Ref ResourcesPrefix
          - !Ref PipelineType
          - !Ref Environment
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      RetentionInDays: 90
    
  CodeBuildRole:
    Properties:
      Description: Creating service role in IAM for AWS CodeBuild
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "CostAllocationProduct"
          Value: !Ref CostAllocationProduct
        - Key: "ManagedBy"
          Value: !Ref ManagedBy
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
      Path: /
    Type: AWS::IAM::Role

  DeployProject:
    Type: AWS::CodeBuild::Project
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: E1029
            reason: "warnings because of inline bash script"
          - id: W32
            reason: "There is no PII data during build, skipping encryption at rest "
    Properties:
      Name: !Join
        - "-"
        - - !Ref ResourcesPrefix
          - !Ref PipelineType
          - !Ref Environment
          - "deploy"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      ServiceRole: !GetAtt CodeBuildRole.Arn
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref CodeBuildLogs
          Status: ENABLED
          StreamName: SamBuild
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: TESTING_CLOUDFORMATION_EXECUTION_ROLE
            Type: PLAINTEXT
            Value: !GetAtt CloudformationRole.Arn
          - Name: TESTING_ARTIFACTS_BUCKET
            Type: PLAINTEXT
            Value: !Ref PipelineArtifactsBucket
          - Name: SAM_CLI_TELEMETRY
            Type: PLAINTEXT
            Value: "0"
          - Name: SAM_TEMPLATE
            Type: PLAINTEXT
            Value: "template.yaml"
          - Name: Environment
            Type: PLAINTEXT
            Value: !Ref Environment
          - Name: CostAllocationProduct
            Type: PLAINTEXT
            Value: !Ref CostAllocationProduct
          - Name: ManagedBy
            Type: PLAINTEXT
            Value: !Ref ManagedBy
          - Name: ResourcesPrefix
            Type: PLAINTEXT
            Value: !Ref ResourcesPrefix
          - Name: Email
            Type: PLAINTEXT
            Value: !Ref Email
          - Name: PipelineType
            Type: PLAINTEXT
            Value: !Ref PipelineType
          - Name: TemplatePath
            Type: PLAINTEXT
            Value: !FindInMap [TypePath, !Ref PipelineType, Path]
      Source:
        Type: NO_SOURCE
        BuildSpec: !If
          - IsPipelineTypeApi
          - |
            version: 0.2
            phases:
              install:
                runtime-versions:
                  python: 3.8
                commands:
                  - pip install awscli --upgrade --quiet
                  - pip install cfn-lint --quiet
                  - gem install cfn-nag
              build:
                commands:
                  - cd ${TemplatePath}
                  - cfn_nag_scan -i ${SAM_TEMPLATE}
                  - cfn-lint ${SAM_TEMPLATE}
                  - cfn-lint -i W -t ${SAM_TEMPLATE}
                  - sam validate --template ${SAM_TEMPLATE}
                  - sam build --template ${SAM_TEMPLATE}
                  - sam deploy --stack-name ${ResourcesPrefix}-${PipelineType}-${Environment} --capabilities CAPABILITY_IAM  --s3-bucket ${TESTING_ARTIFACTS_BUCKET} --no-fail-on-empty-changeset --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE}  --no-confirm-changeset   --parameter-overrides ParameterKey=Email,ParameterValue=${Email}  ParameterKey=ResourcesPrefix,ParameterValue=${ResourcesPrefix} ParameterKey=Environment,ParameterValue=${Environment}  --tags "Environment=${Environment} CostAllocationProduct=${CostAllocationProduct} ManagedBy=CloudFormation"
                  - aws apigateway create-deployment --rest-api-id $(aws cloudformation describe-stacks --stack-name ${ResourcesPrefix}-${PipelineType}-${Environment}  --query 'Stacks[0].Outputs' --output text | grep ^ApiId | awk {'print $2'}) --stage-name $(aws cloudformation describe-stacks --stack-name ${ResourcesPrefix}-${PipelineType}-${Environment}   --query 'Stacks[0].Outputs' --output text | grep ^StageName | awk {'print $2'}) || true
                  - "curl $(aws cloudformation describe-stacks --stack-name ${ResourcesPrefix}-${PipelineType}-${Environment} --query 'Stacks[0].Outputs' --output text | grep ^POSTRecommendationsApiGatewayInvokeURL | awk {'print $2'}) -H 'Content-Type: application/json' --data-raw \'{"visitor_id":"163cdc71-7421-1441-1a21-11cd1f36c8b1","platform":"desktop","sub_requests":[{"widget_id":"recommended-mobile_art_morestories","last_content_ids":"TTSIR6HFKZC5FNS3MSMZN7ZS3I","limit":6,"context":"mobile_art_morestories","platform":"desktop","section":"/canada/alberta/","visitor_type":"anonymous"}]}\' -v"
          - |
            version: 0.2
            phases:
              install:
                runtime-versions:
                  python: 3.8
                commands:
                  - pip install awscli --upgrade --quiet
                  - pip install cfn-lint --quiet
                  - gem install cfn-nag
              build:
                commands:
                  - cd ${TemplatePath}
                  - cfn_nag_scan -i ${SAM_TEMPLATE}
                  - cfn-lint ${SAM_TEMPLATE}
                  - cfn-lint -i W -t ${SAM_TEMPLATE}
                  - sam validate --template ${SAM_TEMPLATE}
                  - sam build --template ${SAM_TEMPLATE}
                  - sam deploy --stack-name ${ResourcesPrefix}-${PipelineType}-${Environment} --capabilities CAPABILITY_IAM  --s3-bucket ${TESTING_ARTIFACTS_BUCKET} --no-fail-on-empty-changeset --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE}  --no-confirm-changeset   --parameter-overrides ParameterKey=Email,ParameterValue=${Email}  ParameterKey=ResourcesPrefix,ParameterValue=${ResourcesPrefix} ParameterKey=Environment,ParameterValue=${Environment} --tags "Environment=${Environment} CostAllocationProduct=${CostAllocationProduct} ManagedBy=CloudFormation"
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "CostAllocationProduct"
          Value: !Ref CostAllocationProduct
        - Key: "ManagedBy"
          Value: !Ref ManagedBy

  UpdateParams:
    Type: AWS::CodeBuild::Project
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: E1029
            reason: "warnings because of inline bash script"
          - id: W32
            reason: "There is no PII data during build, skipping encryption at rest "
    Properties:
      Name: !Join
        - "-"
        - - !Ref ResourcesPrefix
          - !Ref PipelineType
          - !Ref Environment
          - "params"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      ServiceRole: !GetAtt CodeBuildRole.Arn
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref CodeBuildLogs
          Status: ENABLED
          StreamName: SamBuild
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: TESTING_CLOUDFORMATION_EXECUTION_ROLE
            Type: PLAINTEXT
            Value: !GetAtt CloudformationRole.Arn
          - Name: TESTING_ARTIFACTS_BUCKET
            Type: PLAINTEXT
            Value: !Ref PipelineArtifactsBucket
          - Name: SAM_CLI_TELEMETRY
            Type: PLAINTEXT
            Value: "0"
          - Name: SAM_TEMPLATE
            Type: PLAINTEXT
            Value: "template.yaml"
          - Name: Environment
            Type: PLAINTEXT
            Value: !Ref Environment
          - Name: CostAllocationProduct
            Type: PLAINTEXT
            Value: !Ref CostAllocationProduct
          - Name: ManagedBy
            Type: PLAINTEXT
            Value: !Ref ManagedBy
          - Name: ResourcesPrefix
            Type: PLAINTEXT
            Value: !Ref ResourcesPrefix
          - Name: Email
            Type: PLAINTEXT
            Value: !Ref Email
          - Name: PipelineType
            Type: PLAINTEXT
            Value: !Ref PipelineType
          - Name: TemplatePath
            Type: PLAINTEXT
            Value: !FindInMap [TypePath, !Ref PipelineType, Path]
          - Name: DevGlueSourceBucket
            Type: PLAINTEXT
            Value: !Ref DevGlueSourceBucket

      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.8
            build:
              commands:
                - echo cd ${TemplatePath} && cd ${TemplatePath}
                - export input_bucket=`aws cloudformation describe-stacks --stack-name ${ResourcesPrefix}-${PipelineType}-${Environment}  --query 'Stacks[0].Outputs' --output table | grep InputBucketName  | awk -F \| {'print $4'} | awk {'print $1'}`
                - for file in `rm -rf .temp_params.json; ls ../../config/${ResourcesPrefix}/${Environment}/`; do aws s3 cp s3://${input_bucket}/config/${ResourcesPrefix}/${Environment}/${file} .temp_params.json ${profile_arg} && diff -ruNp ../../config/${ResourcesPrefix}/${Environment}/${file} .temp_params.json || aws s3 cp ../../config/${ResourcesPrefix}/${Environment}/${file} s3://${input_bucket}/config/${ResourcesPrefix}/${Environment}/${file} ; done
                - if [ "${Environment}" = "prod" ]; then echo aws s3 sync --delete s3://${DevGlueSourceBucket}/glue-job/Interactions s3://${input_bucket}/Interactions; fi
                - if [ "${Environment}" = "prod" ]; then echo aws s3 sync --delete s3://${DevGlueSourceBucket}/glue-job/Items s3://${input_bucket}/Items; fi
                - if [ "${Environment}" = "prod" ]; then aws s3 sync --delete s3://${DevGlueSourceBucket}/glue-job/Interactions s3://${input_bucket}/Interactions; fi
                - if [ "${Environment}" = "prod" ]; then aws s3 sync --delete s3://${DevGlueSourceBucket}/glue-job/Items s3://${input_bucket}/Items; fi
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "CostAllocationProduct"
          Value: !Ref CostAllocationProduct
        - Key: "ManagedBy"
          Value: !Ref ManagedBy

  BuildProject:
    Type: AWS::CodeBuild::Project
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W32
            reason: "There is no PII data during build, skipping encryption at rest "
    Properties:
      Name: !Join
        - "-"
        - - !Ref ResourcesPrefix
          - !Ref PipelineType
          - !Ref Environment
          - "build"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      ServiceRole: !GetAtt CodeBuildRole.Arn
      LogsConfig: 
        CloudWatchLogs:
          GroupName: !Ref CodeBuildLogs
          Status: ENABLED
          StreamName: SamBuild
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: TESTING_REGION
            Type: PLAINTEXT
            Value: us-east-1
          - Name: TESTING_CLOUDFORMATION_EXECUTION_ROLE
            Type: PLAINTEXT
            Value: !GetAtt CloudformationRole.Arn
          - Name: TESTING_ARTIFACTS_BUCKET
            Type: PLAINTEXT
            Value: !Ref PipelineArtifactsBucket
          - Name: SAM_CLI_TELEMETRY
            Type: PLAINTEXT
            Value: "0"
          - Name: SAM_TEMPLATE
            Type: PLAINTEXT
            Value: "template.yaml"
          - Name: Environment
            Type: PLAINTEXT
            Value: !Ref Environment  
          - Name: CostAllocationProduct
            Type: PLAINTEXT
            Value: !Ref CostAllocationProduct  
          - Name: ManagedBy
            Type: PLAINTEXT
            Value: !Ref ManagedBy  
          - Name: ResourcesPrefix
            Type: PLAINTEXT
            Value: !Ref ResourcesPrefix
          - Name: Email
            Type: PLAINTEXT
            Value: !Ref Email
          - Name: PipelineType
            Type: PLAINTEXT
            Value: !Ref PipelineType
          - Name: TemplatePath
            Type: PLAINTEXT
            Value: !FindInMap [TypePath, !Ref PipelineType, Path]

      Source:
        Type: NO_SOURCE
        BuildSpec: |
            version: 0.2
            phases:
              install:
                runtime-versions:
                  python: 3.8
                commands:
                  - pip install awscli --upgrade --quiet
                  - pip install cfn-lint --quiet
                  - gem install cfn-nag

              build:
                commands:
                  - echo cd ${TemplatePath} && cd ${TemplatePath}
                  - cfn_nag_scan -i ${SAM_TEMPLATE}
                  - cfn-lint ${SAM_TEMPLATE}
                  - cfn-lint -i W -t ${SAM_TEMPLATE}
                  - sam validate --template ${SAM_TEMPLATE}
                  - sam build --template ${SAM_TEMPLATE}

      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "CostAllocationProduct"
          Value: !Ref CostAllocationProduct
        - Key: "ManagedBy"
          Value: !Ref ManagedBy

  PipelineTopic:
    Type: AWS::SNS::Topic
    Condition: IsPipelineApprovalStageCondition
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W47
            reason: "This SNS topic is only for cloudwatch alarms and do not process confidential data"
    Properties:
      TopicName: !Join
        - "-"
        - - !Ref ResourcesPrefix
          - !Ref PipelineType
          - !Ref Environment
          - "APIGW"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"

  AlarmSubscription:
    Type: AWS::SNS::Subscription
    Condition: IsPipelineApprovalStageCondition
    Properties:
      Endpoint: !Ref Email
      Protocol: email
      TopicArn: !Ref 'PipelineTopic'

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Join
          - "-"
          - - !Ref ResourcesPrefix
            - !Ref PipelineType
            - !Ref Environment
            - !Select
              - 0
              - !Split
                - "-"
                - !Select
                  - 2
                  - !Split
                    - "/"
                    - !Ref "AWS::StackId"
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "CostAllocationProduct"
          Value: !Ref CostAllocationProduct
        - Key: "ManagedBy"
          Value: !Ref ManagedBy
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineArtifactsBucket
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
      - Name: Source
        Actions:
          - Name: Source
            InputArtifacts: []
            ActionTypeId:
              Category: Source
              Owner: ThirdParty
              Version: 1
              Provider: GitHub
            OutputArtifacts:
              - Name: SourceCode
            Configuration:
              Owner: !Ref GitHubOwner
              Repo: !Ref GitHubRepo
              Branch: !Ref GitHubBranch
              PollForSourceChanges: true
              OAuthToken: '{{resolve:ssm:tgam-ds-deploy-github}}'
            RunOrder: 1
      # Build and Deploy, etc., stages would follow. Here is an example
      - Name: Build
        Actions:
        - Name: SamBuild
          ActionTypeId:
            Category: Build
            Owner: AWS
            Provider: CodeBuild
            Version: '1'
          InputArtifacts:
            - Name: SourceCode
          Configuration:
            ProjectName: !Ref BuildProject
          RunOrder: 1
      - !If
        - IsPipelineApprovalStageCondition
        - Name: Approval
          Actions:
            - Name: Approval
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: "1"
                Provider: Manual
              RunOrder: 1
              Configuration:
                NotificationArn: !Ref PipelineTopic
        - !Ref AWS::NoValue
      - Name: Deploy
        Actions:
          - Name: SamDeploy
            ActionTypeId:
              Category: Build
              Owner: AWS
              Provider: CodeBuild
              Version: '1'
            InputArtifacts:
              - Name: SourceCode
            Configuration:
              ProjectName: !Ref DeployProject
              EnvironmentVariables: '[{"name":"BuildType","value":"Deploy","type":"PLAINTEXT"}]'
            RunOrder: 1
      - !If
        - IsPipelineTypeApi
        - !Ref AWS::NoValue
        - Name: UpdateParams
          Actions:
            - Name: SamDeploy
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceCode
              Configuration:
                ProjectName: !Ref UpdateParams
                EnvironmentVariables: '[{"name":"BuildType","value":"Deploy","type":"PLAINTEXT"}]'
              RunOrder: 1

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "CostAllocationProduct"
          Value: !Ref CostAllocationProduct
        - Key: "ManagedBy"
          Value: !Ref ManagedBy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole

  CodePipelineRolePolicy:
    Type: 'AWS::IAM::Policy'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: "We need to have * for iam:ListPolicies to enable cloudformation cli "
    Properties:
      Roles:
       - !Ref CodePipelineRole
      PolicyName: !Join
        - "-"
        - - !Ref ResourcesPrefix
          - !Ref PipelineType
          - !Ref Environment
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource:
              - !Sub ${CodeBuildLogs.Arn}
          - Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:GetObjectVersion'
              - 's3:GetBucketAcl'
              - 's3:GetBucketLocation'
            Resource:
              - !Sub ${PipelineArtifactsBucket.Arn}/*
              - !Sub ${PipelineArtifactsBucket.Arn}
          - Action:
              - "codebuild:StartBuild"
              - "codebuild:BatchGetBuilds"
            Resource:
              - !GetAtt DeployProject.Arn
              - !GetAtt BuildProject.Arn
              - !GetAtt UpdateParams.Arn
            Effect: Allow
          - !If
            - IsPipelineApprovalStageCondition
            - Action:
                - "sns:Publish"
              Resource:
                - !Ref PipelineTopic
              Effect: Allow
            - !Ref AWS::NoValue
  CloudformationRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W43
            reason: "We need to have cloudformation with AdministratorAccess to create resoruces "
    Properties:
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "CostAllocationProduct"
          Value: !Ref CostAllocationProduct
        - Key: "ManagedBy"
          Value: !Ref ManagedBy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: cloudformation.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess #TODO: Reduce permissions

#No tags for policy
  CodeBuildRolePolicy:
    Type: 'AWS::IAM::Policy'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: "We need to have * for iam:ListPolicies to enable cloudformation cli "
    Properties:
      PolicyName: !Join
        - "-"
        - - !Ref ResourcesPrefix
          - !Ref PipelineType
          - !Ref Environment
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource:
              - !Sub ${CodeBuildLogs.Arn}
          - Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:GetObjectVersion'
              - 's3:GetBucketAcl'
              - 's3:GetBucketLocation'
            Resource:
              - !Sub ${PipelineArtifactsBucket.Arn}/*
              - !Sub ${PipelineArtifactsBucket.Arn}
          - Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:DeleteObject'
              - 's3:GetObject'
              - 's3:GetObjectVersion'
              - 's3:GetBucketAcl'
              - 's3:GetBucketLocation'
            Resource: !Sub "arn:aws:s3:::${ResourcesPrefix}-${Environment}-input*/*"
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:GetObjectVersion'
              - 's3:GetBucketAcl'
              - 's3:GetBucketLocation'
            Resource: !Sub "arn:aws:s3:::${DevGlueSourceBucket}/*"
          - Effect: Allow
            Action:
              - 's3:ListBucket'
            Resource:
              - !Sub "arn:aws:s3:::${DevGlueSourceBucket}"
              - !Sub "arn:aws:s3:::${ResourcesPrefix}-${Environment}-input*"
          - Effect: Allow
            Action:
              - 'iam:ListPolicies'
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - 'iam:PassRole'
            Resource:
              - !GetAtt CloudformationRole.Arn

          - Effect: Allow
            Action:
              - 'cloudformation:CreateChangeSet'
              - 'cloudformation:CreateStack'
              - 'cloudformation:DeleteStack'
              - 'cloudformation:DescribeChangeSet'
              - 'cloudformation:DescribeStackEvents'
              - 'cloudformation:DescribeStacks'
              - 'cloudformation:ExecuteChangeSet'
              - 'cloudformation:GetTemplateSummary'
              - 'cloudformation:ListStackResources'
              - 'cloudformation:UpdateStack'
              - 'cloudformation:CreateChangeSet'
              - 'cloudformation:CreateChangeSet'
            Resource:
              - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ResourcesPrefix}-*"
          - Effect: Allow
            Action:
              - 'apigateway:POST'
            Resource:
              - !Sub "arn:aws:apigateway:${AWS::Region}::/restapis/*/deployments"
          - Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:GetObjectVersion'
              - 's3:GetBucketAcl'
              - 's3:GetBucketLocation'
            Resource: !Sub "arn:aws:s3:::${ResourcesPrefix}-${Environment}-input*/params*"

      Roles:
        - !Ref CodeBuildRole

# Outputs:
Outputs:
  PipelineArtifactsBucket:
    Value: !Ref PipelineArtifactsBucket
