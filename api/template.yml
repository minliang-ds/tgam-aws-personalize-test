AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  personalize-streaming-events

Globals:
  Function:
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
      SubnetIds: !Ref LambdaPrivateSubnetIDs
    Environment:
      Variables:
        Environment: !Ref Environment  
        ResourcesPrefix: !Ref ResourcesPrefix
        CurretnAccountId: !Ref "AWS::AccountId"
        FilterAppId: !Ref FilterAppId

Mappings: 
  EnvironmentMap: 
    dev: 
      Domain: "recoapi-ng-dev.theglobeandmail.com"
      ProvisionedConcurrent: 10
      ThrottlingRateLimit: 100
      ThrottlingBurstLimit: 200
      LogRotation: 7
      EventLogRotation: 7
      HttpTimeoutMs: 3000
      GetRecoomendationsHttpTimeoutMs: 3000
      GetRecoomendationsLambdaTimeout: 4
    prod:
      Domain: "recoapi-ng-prod.theglobeandmail.com"
      ProvisionedConcurrent: 100
      ThrottlingRateLimit: 200
      ThrottlingBurstLimit: 400
      LogRotation: 30
      EventLogRotation: 7
      HttpTimeoutMs: 3000
      GetRecoomendationsHttpTimeoutMs: 3000
      GetRecoomendationsLambdaTimeout: 4

    stg: 
      Domain: "recoapi-ng-stg.theglobeandmail.com"
      ProvisionedConcurrent: 10
      ThrottlingRateLimit: 100
      ThrottlingBurstLimit: 200
      LogRotation: 7
      EventLogRotation: 7
      GetRecoomendationsHttpTimeoutMs: 3000
      GetRecoomendationsLambdaTimeout: 4



Parameters:
  ResourcesPrefix:
    Type: String
    Default: "tgam-personalize"
    Description: "Name prefix that will be added to most resources. This will allow deploy more than 1 versions of this cloudformation per AWS Account"
    AllowedPattern: "[A-Za-z0-9-_]+"

  Environment:
    Type: String
    Default: dev
    Description: "Type of deployment. Environment name will be used in resources names as in mapping for limits"
    AllowedValues:
      - "dev"
      - "stg"
      - "prod"

  LambdaVPC: 
    Description: VPC ID for Lambda, should have VPC Endpoints for DynamoDB, S3 (and Personalize in future)
    Type: "AWS::EC2::VPC::Id"


  LambdaPrivateSubnetIDs: 
    Description: Private Subnet IDs for Lambda deployments
    Type: "List<AWS::EC2::Subnet::Id>"
    
  StageName:
    Type: String
    Description: "Name of stage deplyment for API Gateway, it will be used in urls ${domain}/${stage}/recommendations"
    Default: v1

  MetricsNamespace:
    Type: String
    Description: "Name of metric Namespace where custom metrics will be published"
    Default: PersonalizeCustomMetrics

  KinesisContentStream:
    Type: String
    Description: "Name of sophi3 content kinesis stream"
    Default: "sophi3-unified-content-stream"

  KinesisEventStream:
    Type: String
    Description: "Name of sophi3 event kinesis stream"
    Default: "sophi3-transformed-event-stream"

  KinesisBatchSize:
    Type: Number
    Description: Please enter your preferred batch size procesing data from Kinesis
    Default: 100
  
  KinesisParallelizationFactor:
    Type: Number
    Description: The number of batches to process concurrently from each shard. The default value is 1. 
    Default: 2

  LambdaIteratorAgeAlarm:
    Type: Number
    Description: Alarm value for IteratorAge
    Default: 10000

  FilterAppId:
    Type: String
    Description: "Value of sp_app_id to filter event streams"
    Default: "theglobeandmail-website"

  Sophi3DynamoDbTableName:
    Type: String
    Description: Dynamo Table name with Sophi3 Data
    Default: Sophi3ContentMetaData

  Sophi2DynamoDbTableName:
    Type: String
    Description: Dynamo Table name with Sophi3 Data
    Default: arc_content

  CertificateARN:
    Type: String
    Default: "arn:aws:acm:us-east-1:727304503525:certificate/b6598508-3ff5-46ab-8099-4b802e625711"

  DefaultNotificationEmail:
    Type: String
    Default: "mlinliu@amazon.com"

  CorsDomainOrigin:
    Type: String
    Default: "theglobeandmail.com"
    Description: Value of Access-Control-Allow-Origin header

    
Resources:

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W36
            reason: "We have decscription - false positive"
          - id: W5
            reason: "Allow outgoing traffit to 0.0.0.0 on 443 port"

    Properties: 
      GroupDescription: !Sub "Security Group for Lambdas for ${ResourcesPrefix} project env: ${Environment}"
      VpcId: !Ref LambdaVPC
      SecurityGroupEgress:
      - CidrIp: 127.0.0.1/32
        IpProtocol: "-1"
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

  APIDomain:
    Type: 'AWS::ApiGateway::DomainName'
    Properties:
      DomainName: !FindInMap [EnvironmentMap, !Ref Environment, Domain]
      CertificateArn: !Ref CertificateARN
      SecurityPolicy: TLS_1_2
      EndpointConfiguration:
        Types: 
          - "EDGE"

  APIMapping:
      Type: AWS::ApiGateway::BasePathMapping
      DependsOn:
        - APIDomain
      Properties: 
        DomainName: !FindInMap [EnvironmentMap, !Ref Environment, Domain]
        RestApiId: !Ref ApiGatewayEndpoint
        Stage: !Ref APIStage
        BasePath: !Ref StageName
        
#### Recommendation api lambda
  PythonMetricsLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: python3.8
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "Lambda is in VPC by default values - ignoring false positive"
    Properties:
      ContentUri: api-lambdas/PythonMetricsLayer
      CompatibleRuntimes:
        - python3.8

  CustomUpdateLogs:
    Type: Custom::CustomUpdateLogs
    Properties:
      ServiceToken: !GetAtt UpdateLogsRetention.Arn
      ContentLambdaName: !Ref PutContent
      RecommendationsLambdaName: !Ref GetRecommendations
      EventsLambdaName: !Ref PutEvents
      ContentLogsRetention: !FindInMap [EnvironmentMap, !Ref Environment, LogRotation]
      RecommendationsLogsRetention: !FindInMap [EnvironmentMap, !Ref Environment, LogRotation]
      EventsLogsRetention: !FindInMap [EnvironmentMap, !Ref Environment, EventLogRotation]


  UpdateLogsRetention:
    Type:  AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "Lambda is in VPC by default values - ignoring false positive"
          - id: W92
            reason: "We dont need ReservedConcurrentExecutions for this function"
    Properties:
      CodeUri: api-lambdas/updateLogs
      Handler: updateLogs.handler
      Runtime: python3.8
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "logs:PutRetentionPolicy"
                - "logs:CreateLogGroup"
              Resource:
                - '*'
      MemorySize: 192
      Environment:
        Variables:
          CAMPAIGN_ARN: !Sub 'arn:aws:personalize:${AWS::Region}:${AWS::AccountId}:campaign/{{resolve:ssm:/personalize/${ResourcesPrefix}/${Environment}/campaignName}}'
          FiltersPrefix: !Sub '{{resolve:ssm:/personalize/${ResourcesPrefix}/${Environment}/datasetGroupName}}'
          Sophi3DynamoDbTableName: !Ref Sophi3DynamoDbTableName
          Sophi2DynamoDbTableName: !Ref Sophi2DynamoDbTableName
          AWS_EMF_NAMESPACE: !Ref MetricsNamespace
          AWS_EMF_SERVICE_NAME: "GetRecommendations"
          AllowOriginDomains: !Ref CorsDomainOrigin

  GetRecommendations:
    Type:  AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "Lambda is in VPC by default values - ignoring false positive"
          - id: W92
            reason: "We dont need ReservedConcurrentExecutions for this function"
    Properties:
      CodeUri: api-lambdas/getRecommendations
      Handler: getRecommendations.handler
      Runtime: python3.8
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "personalize:GetRecommendations"
              Resource:
                - !Sub 'arn:aws:personalize:${AWS::Region}:${AWS::AccountId}:campaign/*'
                - !Sub 'arn:aws:personalize:${AWS::Region}:${AWS::AccountId}:filter/*'
            - Effect: Allow
              Action:
                - "dynamodb:BatchGetItem"
              Resource:
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Sophi3DynamoDbTableName}'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Sophi2DynamoDbTableName}'
      MemorySize: 192
      Timeout: !FindInMap [EnvironmentMap, !Ref Environment, GetRecoomendationsLambdaTimeout]
      Layers:
        - !Ref PythonMetricsLayer
      AutoPublishAlias: "getRecommendations"
      ProvisionedConcurrencyConfig:
        ProvisionedConcurrentExecutions: !FindInMap [EnvironmentMap, !Ref Environment, ProvisionedConcurrent]
      Environment:
        Variables:
          CAMPAIGN_ARN: !Sub "arn:aws:personalize:${AWS::Region}:${AWS::AccountId}:campaign/{{resolve:ssm:/personalize/${ResourcesPrefix}/${Environment}/campaignName}}"
          FiltersPrefix: !Sub '{{resolve:ssm:/personalize/${ResourcesPrefix}/${Environment}/campaignName}}'
          Sophi3DynamoDbTableName: !Ref Sophi3DynamoDbTableName
          Sophi2DynamoDbTableName: !Ref Sophi2DynamoDbTableName
          AWS_EMF_NAMESPACE: !Ref MetricsNamespace
          AWS_EMF_SERVICE_NAME: "GetRecommendations"
          AllowOriginDomains: !Ref CorsDomainOrigin

## Event Lambda
  PutEvents:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "Lambda is in VPC by default values - ignoring false positive"
          - id: W92
            reason: "We dont need ReservedConcurrentExecutions for this function"
    Properties:
      CodeUri: api-lambdas/putevents
      Handler: putevents.handler
      Runtime: nodejs12.x
      MemorySize: 192
      Timeout: 30
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "personalize:PutEvents"
              Resource: "*"
            - Effect: Allow
              Action:
                - "kinesis:SubscribeToShard"
                - "kinesis:ListShards"
                - "kinesis:GetShardIterator"
                - "kinesis:GetRecords"
                - "kinesis:DescribeStream"
                - "kinesis:DescribeStreamSummary"
              Resource:
                - !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${KinesisEventStream}'
                - !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${KinesisEventStream}*'
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt KinesisEventStreamConsumer.ConsumerARN
            StartingPosition: LATEST
            BatchSize: !Ref KinesisBatchSize
            ParallelizationFactor: !Ref KinesisParallelizationFactor
      Environment:
        Variables:
          TRACKING_ID: !Sub '{{resolve:ssm:/personalize/${ResourcesPrefix}/${Environment}/eventTrackerId}}'
          AWS_EMF_NAMESPACE: !Ref MetricsNamespace

#Content Lambda
  PutContent:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "Lambda is in VPC by default values - ignoring false positive"
          - id: W92
            reason: "We dont need ReservedConcurrentExecutions for this function"
    Properties:
      CodeUri: api-lambdas/putcontent
      Handler: putcontent.handler
      Runtime: nodejs12.x
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "personalize:PutItems"
              Resource: "*"
            - Effect: Allow
              Action:
                - "kinesis:SubscribeToShard"
                - "kinesis:ListShards"
                - "kinesis:GetShardIterator"
                - "kinesis:GetRecords"
                - "kinesis:DescribeStream"
                - "kinesis:DescribeStreamSummary"
              Resource:
                - !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${KinesisContentStream}'
                - !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${KinesisContentStream}*'
      Timeout: 30
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt KinesisContentStreamConsumer.ConsumerARN
            StartingPosition: LATEST
            BatchSize: !Ref KinesisBatchSize
            ParallelizationFactor: !Ref KinesisParallelizationFactor

      Environment:
        Variables:
          TRACKING_ID: !Sub '{{resolve:ssm:/personalize/${ResourcesPrefix}/${Environment}/eventTrackerId}}'
          AWS_EMF_NAMESPACE: !Ref MetricsNamespace
          CONTENT_DATASET_ARN: !Sub 'arn:aws:personalize:${AWS::Region}:${AWS::AccountId}:dataset/{{resolve:ssm:/personalize/${ResourcesPrefix}/${Environment}/datasetGroupName}}/ITEMS'

  KinesisEventStreamConsumer:
    Type: "AWS::Kinesis::StreamConsumer"
    Properties:
      StreamARN: !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${KinesisEventStream}'
      ConsumerName: !Join
        - "-"
        - - !Ref ResourcesPrefix
          - !Ref Environment
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"

  KinesisContentStreamConsumer:
    Type: "AWS::Kinesis::StreamConsumer"
    Properties:
      StreamARN:  !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${KinesisContentStream}'
      ConsumerName: !Join
        - "-"
        - - !Ref ResourcesPrefix
          - !Ref Environment
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"


# APIGW
  ApiGatewayEndpoint:
    DependsOn:
      - GetRecommendations
      - PutEvents
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Join
        - "-"
        - - !Ref ResourcesPrefix
          - !Ref Environment
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Description: "Amazon Personalize Streaming Events Enpoint"

#Create the response model for you api
  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    DependsOn:
      - GetRecommendations
      - PutEvents
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayEndpoint
      Schema: {}


#API KEY
  APIKey:
    DependsOn:
      - apiGatewayDeployment
      - APIStage
    Type: "AWS::ApiGateway::ApiKey"
    Properties: 
      Description: "This is an API key"
      Enabled: true
      StageKeys:
      - RestApiId: !Ref ApiGatewayEndpoint
        StageName: !Ref StageName
  usagePlan:
    DependsOn:
      - APIKey
    #  - APIStage
    Type: 'AWS::ApiGateway::UsagePlan'
    Properties:
      ApiStages:
        - ApiId: !Ref ApiGatewayEndpoint
          Stage: !Ref APIStage
      Description: Customer ABC's usage plan
      UsagePlanName: 'se-usage-plan'
  usagePlanKey:
    DependsOn:
    #  - APIKey
      - APIStage
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyId: !Ref APIKey
      KeyType: API_KEY
      UsagePlanId: !Ref usagePlan

  APIStageLogGroup:
    Type: AWS::Logs::LogGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: "Access logs for api gateway - skipping encryption at rest"
    Properties: 
      LogGroupName: !Join
        - "-"
        - - !Ref ResourcesPrefix
          - !Ref Environment
          - "APIGW"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      RetentionInDays: !FindInMap [EnvironmentMap, !Ref Environment, LogRotation]
  
  APIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: !Ref StageName
      AccessLogSetting: 
        DestinationArn: !GetAtt APIStageLogGroup.Arn
        Format: '$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId $context.integration.requestId $context.integration.latency $context.responseLatency'
      Description: !Ref StageName
      TracingEnabled: 'false'
      MethodSettings: 
        - ResourcePath: "/*"
          HttpMethod: "*"
          MetricsEnabled: 'true'
          DataTraceEnabled: 'false'
          LoggingLevel: "INFO"
          ThrottlingBurstLimit: !FindInMap [EnvironmentMap, !Ref Environment, ThrottlingBurstLimit]
          ThrottlingRateLimit: !FindInMap [EnvironmentMap, !Ref Environment, ThrottlingRateLimit]

      RestApiId: !Ref "ApiGatewayEndpoint"
      DeploymentId: !Ref apiGatewayDeployment
  apiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - GetRecommendations
      - PutEvents
    Properties:
      RestApiId: !Ref "ApiGatewayEndpoint"

# Create /recommendations resource
  RecommendationsResource:
    Type: 'AWS::ApiGateway::Resource'
    DependsOn:
      - GetRecommendations
      - PutEvents
    Properties:
      RestApiId: !Ref ApiGatewayEndpoint
      ParentId: !GetAtt 
        - ApiGatewayEndpoint
        - RootResourceId
      PathPart: recommendations
      

  LambdaGetRecommendationsMethod:
    Type: "AWS::ApiGateway::Method"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W59
            reason: "This is a public facing API."
    Properties:
      ApiKeyRequired: "false"
      RestApiId: !Ref ApiGatewayEndpoint
      ResourceId: !Ref RecommendationsResource
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        TimeoutInMillis: !FindInMap [EnvironmentMap, !Ref Environment, GetRecoomendationsHttpTimeoutMs]
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "GetRecommendations.Arn"
          
# Activate CORS
  RecommendationsCORESOptionsMethod:
    Type: AWS::ApiGateway::Method
#    Condition: EnabledApi
    Properties:
      AuthorizationType: "NONE"
      RestApiId: !Ref ApiGatewayEndpoint
      ResourceId: !Ref RecommendationsResource
      HttpMethod: "OPTIONS"
      Integration:
        Type: "MOCK"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            'application/json': 'Empty'
          ResponseParameters:
            'method.response.header.Access-Control-Allow-Headers': 'true'
            'method.response.header.Access-Control-Allow-Methods': 'true'
            'method.response.header.Access-Control-Allow-Origin': 'true'

# Create the invoke permissions
  recommendationsLambdaApiGatewayInvokeGET:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    #  - GetRecommendations
      - PutEvents
      - apiGatewayDeployment
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "GetRecommendations.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayEndpoint}/*/POST/recommendations"

  AlarmTopic:
    Type: AWS::SNS::Topic
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W47
            reason: "This SNS topic is only for cloudwatch alarms and do not process confidential data"

    Properties: 
      TopicName: !Join
        - "-"
        - - !Ref ResourcesPrefix
          - !Ref Environment
          - "APIGW"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"

  AlarmSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref DefaultNotificationEmail
      Protocol: email
      TopicArn: !Ref 'AlarmTopic'
      
  GetRecommendationsErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref AlarmTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref GetRecommendations
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: '1'
  PutContentErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref AlarmTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PutContent
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: '1'
  PutEventsErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref AlarmTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PutEvents
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: '1'
      
  PutContentThrottlesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref AlarmTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PutContent
      EvaluationPeriods: 1
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: '1'
  PutEventsThrottlesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref AlarmTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PutEvents
      EvaluationPeriods: 1
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: '1'    

  RecThrottlesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref AlarmTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref GetRecommendations
      EvaluationPeriods: 2
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: '1'
    

  EventsIteratorAge:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref AlarmTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PutEvents
      EvaluationPeriods: 2
      MetricName: IteratorAge
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Maximum
      Threshold: !Ref LambdaIteratorAgeAlarm
      
  ContentIteratorAge:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref AlarmTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PutContent
      EvaluationPeriods: 1
      MetricName: IteratorAge
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Maximum
      Threshold: !Ref LambdaIteratorAgeAlarm
      
  CampainUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref AlarmTopic
      AlarmDescription: Campain TPS high
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Metrics:
      - Expression: "(m1/300)"
        Id: e1
        Label: "TPS"
      - Id: m1
        MetricStat:
          Metric:
            Dimensions:
              - Name: CampaignArn
                Value: !Sub "arn:aws:personalize:${AWS::Region}:${AWS::AccountId}:campaign/{{resolve:ssm:/personalize/${ResourcesPrefix}/${Environment}/campaignName}}"
            MetricName: GetRecommendations
            Namespace: AWS/Personalize
          Period: 300
          Stat: Sum
        ReturnData: false
      Threshold: "0.8"
      
  PenronalizeDashboard:
   Type: AWS::CloudWatch::Dashboard
   Properties:
     DashboardName:  !Join
        - "-"
        - - !Ref ResourcesPrefix
          - !Ref Environment
          - "Dashboard"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
     DashboardBody: !Sub |
      {
        "widgets": [
          {
                "type": "metric",
                "x": 0,
                "y": 0,
                "width": 24,
                "height": 6,
                "properties": {
                    "metrics": [
                        [ "AWS/ApiGateway", "4XXError", "ApiName", "tgam-personalize-dev-39464c60", "Stage", "${StageName}" ],
                        [ ".", "5XXError", ".", ".", ".", ".", { "color": "#d62728" } ],
                        [ ".", "Latency", ".", ".", ".", ".", { "yAxis": "right", "stat": "Average" } ],
                        [ ".", "Count", ".", ".", ".", "." ],
                        [ ".", "IntegrationLatency", ".", ".", ".", ".", { "stat": "Average", "yAxis": "right" } ]
                    ],
                    "view": "timeSeries",
                    "stacked": false,
                    "region": "${AWS::Region}",
                    "stat": "Sum",
                    "period": 300,
                    "title": "Api Gateway Metrics"
                }
            },
            {
                "height": 6,
                "width": 24,
                "y": 6,
                "x": 0,
                "type": "metric",
                "properties": {
                    "metrics": [
                        [ "AWS/Lambda", "Throttles", "FunctionName", "${GetRecommendations}", { "color": "#ff7f0e" } ],
                        [ ".", "Errors", ".", ".", { "color": "#d62728" } ],
                        [ ".", "Invocations", ".", "." ],
                        [ ".", "Duration", ".", ".", { "yAxis": "right", "stat": "Average", "color": "#aec7e8" } ]
                    ],
                    "view": "timeSeries",
                    "stacked": false,
                    "region": "${AWS::Region}",
                    "stat": "Sum",
                    "period": 300,
                    "title": "GetRecommendations Lambda"
                }
            },
            {
                "height": 6,
                "width": 24,
                "y": 12,
                "x": 0,
                "type": "metric",
                "properties": {
                    "metrics": [
                      [ "PersonalizeCustomMetrics", "PersonalizeRequestTime", "ServiceName", "GetRecommendations", "LogGroup", "${GetRecommendations}", "ServiceType", "AWS::Lambda::Function", { "stat": "Average" } ],
                      [ "PersonalizeCustomMetrics", "DynamoSophi2ReuqestTime", "ServiceName", "GetRecommendations", "LogGroup", "${GetRecommendations}", "ServiceType", "AWS::Lambda::Function", { "stat": "Average" } ],
                      [ "PersonalizeCustomMetrics", "DynamoSophi3ReuqestTime", "ServiceName", "GetRecommendations", "LogGroup", "${GetRecommendations}", "ServiceType", "AWS::Lambda::Function", { "stat": "Average" } ] 
                    ],
                    "view": "timeSeries",
                    "stacked": true,
                    "region": "${AWS::Region}",
                    "stat": "Average",
                    "period": 300,
                    "title": "GetRecommendations Dependency"
                }
            },
            {
                "height": 6,
                "width": 24,
                "y": 18,
                "x": 0,
                "type": "metric",
                "properties": {
                    "metrics": [
                      [ "AWS/Personalize", "GetRecommendations5XXErrors", "CampaignArn", "arn:aws:personalize:${AWS::Region}:${AWS::AccountId}:campaign/{{resolve:ssm:/personalize/${ResourcesPrefix}/${Environment}/campaignName}}", { "color": "#d62728" } ],
                      [ ".", "GetRecommendations4XXErrors", ".", "." ],
                      [ ".", "GetRecommendationsLatency", ".", ".", { "yAxis": "right", "stat": "Average", "color": "#aec7e8" } ],
                      [ ".", "GetRecommendations", ".", "." ]
                    ],
                    "view": "timeSeries",
                    "stacked": false,
                    "region": "${AWS::Region}",
                    "stat": "Sum",
                    "period": 300,
                    "title": "Amazon Personalize Requests Campain: {{resolve:ssm:/personalize/${ResourcesPrefix}/${Environment}/campaignName}}"
                }
            },
            {
                "height": 6,
                "width": 24,
                "y": 24,
                "x": 0,
                "type": "metric",
                "properties": {
                    "metrics": [
                      [ { "expression": "m1/300", "label": "TPS", "id": "e1" } ],
                      [ "AWS/Personalize", "GetRecommendations", "CampaignArn", "arn:aws:personalize:${AWS::Region}:${AWS::AccountId}:campaign/{{resolve:ssm:/personalize/${ResourcesPrefix}/${Environment}/campaignName}}", { "id": "m1", "visible": false} ]
                    ],
                    "view": "timeSeries",
                    "stacked": false,
                    "region": "${AWS::Region}",
                    "stat": "Sum",
                    "period": 300,
                    "title": "Amazon Personalize Actial vs Provisioned  TPS: {{resolve:ssm:/personalize/${ResourcesPrefix}/${Environment}/campaignName}}",
                    "annotations": {
                        "horizontal": [
                            {
                                "label": "Provisioned TPS",
                                "value": {{resolve:ssm:/personalize/${ResourcesPrefix}/${Environment}/minProvisionedTPS}}
                            }
                        ]
                    }
                }
            },
            {
                "height": 6,
                "width": 24,
                "y": 30,
                "x": 0,
                "type": "metric",
                "properties": {
                    "metrics": [
                      [ "PersonalizeCustomMetrics", "ReturnRecommendations", "ServiceName", "GetRecommendations", "LogGroup", "${GetRecommendations}", "ServiceType", "AWS::Lambda::Function", { "yAxis": "right", "stat": "Minimum" } ],
                      [ "PersonalizeCustomMetrics", "MissingRecommendations", "ServiceName", "GetRecommendations", "LogGroup", "${GetRecommendations}", "ServiceType", "AWS::Lambda::Function", { "stat": "Average" } ]
                    ],
                    "view": "timeSeries",
                    "stacked": true,
                    "region": "${AWS::Region}",
                    "stat": "Average",
                    "period": 300,
                    "title": "GetRecommendations Health",
                    "yAxis": {
                        "left": {
                            "label": "Avg Missing Recommendations",
                            "showUnits": false
                        },
                        "right": {
                            "label": "Min Returned Recommendations",
                            "showUnits": false
                        }
                    }
                }
            },

            {
                "height": 6,
                "width": 12,
                "y": 36,
                "x": 0,
                "type": "metric",
                "properties": {
                    "metrics": [
                        [ "AWS/Lambda", "Throttles", "FunctionName", "${PutEvents}", { "color": "#ff7f0e" } ],
                        [ ".", "Errors", ".", ".", { "color": "#d62728" } ],
                        [ ".", "Invocations", ".", "." ],
                        [ ".", "Duration", ".", ".", { "yAxis": "right", "stat": "Average", "color": "#aec7e8" } ]
                    ],
                    "view": "timeSeries",
                    "stacked": false,
                    "region": "${AWS::Region}",
                    "stat": "Sum",
                    "period": 300,
                    "title": "PutEvents Lambda"
                }
            },
            {
                "height": 6,
                "width": 12,
                "y": 42,
                "x": 0,
                "type": "metric",
                "properties": {
                    "metrics": [
                        [ "AWS/Personalize", "putEvents4xxErrors", "EventTrackerArn", "{{resolve:ssm:/personalize/${ResourcesPrefix}/${Environment}/eventTrackerArn}}", { "color": "#ff7f0e" } ],
                        [ ".", "putEvents5xxErrors", ".", ".", { "color": "#d62728" } ],
                        [ ".", "putEventsRequests", ".", "." ],
                        [ ".", "putEventLatency", ".", ".", { "yAxis": "right", "stat": "Average", "color": "#aec7e8" } ]
                    ],
                    "view": "timeSeries",
                    "stacked": false,
                    "region": "${AWS::Region}",
                    "stat": "Sum",
                    "period": 300,
                    "title": "PutEvents Personalize Tracker: {{resolve:ssm:/personalize/${ResourcesPrefix}/${Environment}/eventTrackerArn}}"
                }
            },
            {
                "height": 6,
                "width": 12,
                "y": 36,
                "x": 12,
                "type": "metric",
                "properties": {
                    "metrics": [
                        [ "AWS/Lambda", "Throttles", "FunctionName", "${PutContent}", { "color": "#ff7f0e" } ],
                        [ ".", "Errors", ".", ".", { "color": "#d62728" } ],
                        [ ".", "Invocations", ".", "." ],
                        [ ".", "Duration", ".", ".", { "yAxis": "right", "stat": "Average", "color": "#aec7e8" } ]
                    ],
                    "view": "timeSeries",
                    "stacked": false,
                    "region": "${AWS::Region}",
                    "stat": "Sum",
                    "period": 300,
                    "title": "PutContent Lambda"
                }
            },
            {
                "height": 6,
                "width": 12,
                "y": 48,
                "x": 0,
                "type": "metric",
                "properties": {
                    "metrics": [
                        [ "AWS/Lambda", "IteratorAge", "FunctionName", "${PutEvents}", { "color": "#ff7f0e" } ]
                    ],
                    "view": "timeSeries",
                    "stacked": true,
                    "region": "${AWS::Region}",
                    "stat": "Maximum",
                    "period": 60,
                    "title": "PutEvents Lambda IteratorAge",
                    "annotations": {
                        "horizontal": [
                            {
                                "label": "Alarm",
                                "value": ${LambdaIteratorAgeAlarm}
                            }
                        ]
                    }
                }
            },
            {
                "height": 6,
                "width": 12,
                "y": 48,
                "x": 12,
                "type": "metric",
                "properties": {
                    "metrics": [
                        [ "AWS/Lambda", "IteratorAge", "FunctionName", "${PutContent}", { "color": "#ff7f0e" } ]
                    ],
                    "view": "timeSeries",
                    "stacked": true,
                    "region": "${AWS::Region}",
                    "stat": "Maximum",
                    "period": 60,
                    "title": "PutContent Lambda IteratorAge",
                    "annotations": {
                        "horizontal": [
                            {
                                "label": "Alarm",
                                "value": ${LambdaIteratorAgeAlarm}
                            }
                        ]
                    }
                }
            },
            {
                "type": "alarm",
                "y": 54,
                "x": 0,
                "width": 24,
                "height": 3,
                "properties": {
                    "title": "Lambda Alarm Status",
                    "alarms": [
                        "${GetRecommendationsErrorAlarm.Arn}",
                        "${RecThrottlesAlarm.Arn}",
                        "${PutContentErrorAlarm.Arn}",
                        "${PutContentThrottlesAlarm.Arn}",
                        "${PutEventsErrorAlarm.Arn}",
                        "${PutEventsThrottlesAlarm.Arn}",
                        "${ContentIteratorAge.Arn}",
                        "${EventsIteratorAge.Arn}",
                        "${CampainUtilizationAlarm.Arn}"
                    ]
                }
            }
        ]
      }
         
# Outputs:
Outputs:
  GetRecommendations:
    Value: !Ref GetRecommendations
  PutContent:
    Value: !Ref PutContent
  PutEvents:
    Value: !Ref PutEvents
  ApiId:
    Value: !Ref ApiGatewayEndpoint
  StageName:
    Value: !Ref StageName
  POSTRecommendationsApiGatewayInvokeURL:
    Value: !Sub
      - https://${Domain}/${StageName}/recommendations
      - { Domain: !FindInMap [EnvironmentMap, !Ref Environment, Domain] }
  APIKEY:
    Value: !Sub "https://console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/api-keys/${APIKey}"