AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  personalize-streaming-events

Globals:
  Function:
    Timeout: 3
    Tags:
      Environment: !Ref Environment
      CostAllocationProduct: !Ref CostAllocationProduct
      ManagedBy: !Ref ManagedBy
    Environment:
      Variables:
        Environment: !Ref Environment  
        CostAllocationProduct: !Ref CostAllocationProduct  
        ManagedBy: !Ref ManagedBy
        ResourcesPrefix: !Ref ResourcesPrefix
        CurretnAccountId: !Ref "AWS::AccountId"
        EventsTZ: "America/Toronto"
      
Parameters:
  ResourcesPrefix:
    Type: String
    Default: "tgam-personalize"
    AllowedPattern: "[A-Za-z0-9-_]+"

  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - "dev"
      - "stg"
      - "prod"

  StageName:
    Type: String
    Default: v1

  MetricsNamespace:
    Type: String
    Default: PersonalizeCustomMetrics

  ManagedBy:
    Type: String
    Default: "CloudFormation"
    AllowedValues:
      - "CloudFormation"

  CostAllocationProduct:
    Type: String
    Default: "amazon_personalize"
    AllowedValues:
      - "amazon_personalize"
      
  KinesisContentStream:
    Type: String
    Default: "sophi3-unified-content-stream"

  KinesisEventStream:
    Type: String
    Default: "sophi3-transformed-event-stream"

  LogRotation:
    Type: Number
    Description: Number of days for log rotation in cloudwatch logs
    Default: 30

  KinesisBatchSize:
    Type: Number
    Description: Please enter your preferred batch size procesing data from Kinesis
    Default: 100
  
  KinesisParallelizationFactor:
    Type: Number
    Description: The number of batches to process concurrently from each shard. The default value is 1. 
    Default: 2

  LambdaIteratorAgeAlarm:
    Type: Number
    Description: Alarm value for IteratorAge
    Default: 10000
    
  ContentDatasetName:
    Type: String
    Description: "Name of datasetGroup from params.json file"
    Default: "tgam-personalize-mlops-test"
  
  EventTrackerIdParam:
    Type: String
    Description: Please enter your Amazon Personalize Event Tracker ID
    Default: f843d3d9-7153-436b-b4be-ed5ce8375c57
  
  CampaignName:
    Type: String
    Description: Please enter your Amazon Personalize Personalize CampaignARN where you would like to get recommendations 
    Default: userPersonalizationCampaign
  
  FiltersPrefix:
    Type: String
    Description: FiltersPrefix for personalize
    Default: tgam-personalize-mlops-test

  Sophi3DynamoDbTableName:
    Type: String
    Description: FiltersPrefix for personalize
    Default: Sophi3ContentMetaData

  Sophi2DynamoDbTableName:
    Type: String
    Description: FiltersPrefix for personalize
    Default: arc_content

  Email:
    Type: String
    Description: Email to be notified
    Default: youremail@yourprovider.com

  ExternalDomain:
    Type: String
    Default: "NONE"
    AllowedValues:
      - "recoapi-ng-dev.theglobeandmail.ca"
      - "recoapi-ng-prod.theglobeandmail.ca"
      - "NONE"

  CertificateARN:
    Type: String
    Default: "arn:aws:acm:us-east-1:727304503525:certificate/2d541648-2f71-4b97-89ed-26d252d496b9"

Resources:

# # DDB History table
# Lambda functions
  APIDomain:
    Type: 'AWS::ApiGateway::DomainName'
    Properties:
      DomainName: !Ref ExternalDomain
      CertificateArn: !Ref CertificateARN
      SecurityPolicy: TLS_1_2
      EndpointConfiguration:
        Types: 
          - "EDGE"
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "CostAllocationProduct"
          Value: !Ref CostAllocationProduct
        - Key: "ManagedBy"
          Value: !Ref ManagedBy
        
  APIMapping:
      Type: AWS::ApiGateway::BasePathMapping
      Properties: 
        DomainName: !Ref ExternalDomain
        RestApiId: !Ref ApiGatewayEndpoint
        Stage: !Ref APIStage
        BasePath: !Ref StageName
        
#### Api part
  RecommendationsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "CostAllocationProduct"
          Value: !Ref CostAllocationProduct
        - Key: "ManagedBy"
          Value: !Ref ManagedBy
  RecommendationsPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: se-lambda-execution-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "personalize:GetRecommendations"
            Resource:
              - !Sub 'arn:aws:personalize:${AWS::Region}:${AWS::AccountId}:campaign/*'
              - !Sub 'arn:aws:personalize:${AWS::Region}:${AWS::AccountId}:filter/*'
          - Effect: Allow
            Action:
              - "dynamodb:BatchGetItem"
            Resource:
             - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Sophi3DynamoDbTableName}'
             - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Sophi2DynamoDbTableName}'
      Roles:
        - !Ref RecommendationsRole
        
        
  EventApiLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonPersonalizeFullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "CostAllocationProduct"
          Value: !Ref CostAllocationProduct
        - Key: "ManagedBy"
          Value: !Ref ManagedBy
  EventLambdaPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: se-lambda-execution-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "personalize:*"
            Resource: "*"
          - Effect: Allow
            Action:
              - "kinesis:SubscribeToShard"
              - "kinesis:ListShards"
              - "kinesis:GetShardIterator"
              - "kinesis:GetRecords"
              - "kinesis:DescribeStream"
              - "kinesis:DescribeStreamSummary"
            Resource:
              - !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${KinesisEventStream}'
              - !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${KinesisEventStream}*'
      Roles:
        - !Ref EventApiLambdaRole
      
  ContentApiLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonPersonalizeFullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "CostAllocationProduct"
          Value: !Ref CostAllocationProduct
        - Key: "ManagedBy"
          Value: !Ref ManagedBy
  ContentLambdaPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: se-lambda-execution-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "personalize:*"
            Resource: "*"
          - Effect: Allow
            Action:
              - "kinesis:SubscribeToShard"
              - "kinesis:ListShards"
              - "kinesis:GetShardIterator"
              - "kinesis:GetRecords"
              - "kinesis:DescribeStream"
              - "kinesis:DescribeStreamSummary"
            Resource:
              - !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${KinesisContentStream}'
              - !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${KinesisContentStream}*'
      Roles:
        - !Ref ContentApiLambdaRole
      
  PythonMetricsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: api-lambdas/PythonMetricsLayer
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: python3.8              # Required to have AWS SAM build this layer
      
  GetRecommendations:
    DependsOn:
      - RecommendationsPolicy
    Type:  AWS::Serverless::Function
    Properties:
      CodeUri: api-lambdas/getRecommendations
      Handler: getRecommendations.handler
      Runtime: python3.8
      Role: !GetAtt [RecommendationsRole, Arn]
      MemorySize: 192
      Layers:
        - !Ref PythonMetricsLayer
      Environment:
        Variables:
          CAMPAIGN_ARN: !Sub 'arn:aws:personalize:${AWS::Region}:${AWS::AccountId}:campaign/${CampaignName}'
          FiltersPrefix: !Ref FiltersPrefix
          Sophi3DynamoDbTableName: !Ref Sophi3DynamoDbTableName
          Sophi2DynamoDbTableName: !Ref Sophi2DynamoDbTableName
          AWS_EMF_NAMESPACE: !Ref MetricsNamespace
          AWS_EMF_SERVICE_NAME: "GetRecommendations"
  PutEvents:
    DependsOn:
      - EventLambdaPolicies
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api-lambdas/putevents
      Handler: putevents.handler
      Runtime: nodejs12.x
      Role: !GetAtt [EventApiLambdaRole, Arn]
      MemorySize: 192
      Timeout: 30
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt KinesisEventStreamConsumer.ConsumerARN
            StartingPosition: LATEST
            BatchSize: !Ref KinesisBatchSize
            ParallelizationFactor: !Ref KinesisParallelizationFactor
      Environment:
        Variables:
          TRACKING_ID: !Ref EventTrackerIdParam
          AWS_EMF_NAMESPACE: !Ref MetricsNamespace
  PutContent:
    DependsOn:
      - ContentLambdaPolicies
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: api-lambdas/putcontent
      Handler: putcontent.handler
      Runtime: nodejs12.x
      Role: !GetAtt [ContentApiLambdaRole, Arn]
      Timeout: 30
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt KinesisContentStreamConsumer.ConsumerARN
            StartingPosition: LATEST
            BatchSize: !Ref KinesisBatchSize
            ParallelizationFactor: !Ref KinesisParallelizationFactor

      Environment:
        Variables:
          TRACKING_ID: !Ref EventTrackerIdParam
          AWS_EMF_NAMESPACE: !Ref MetricsNamespace
          CONTENT_DATASET_ARN: !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:dataset/${ContentDatasetName}/ITEMS'
          
  KinesisEventStreamConsumer:
    Type: "AWS::Kinesis::StreamConsumer"
    Properties:
      StreamARN: !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${KinesisEventStream}' 
      ConsumerName: !Join
        - "-"
        - - !Ref ResourcesPrefix
          - !Ref Environment
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
                  
  KinesisContentStreamConsumer:
    Type: "AWS::Kinesis::StreamConsumer"
    Properties:
      StreamARN:  !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${KinesisContentStream}' 
      ConsumerName: !Join
        - "-"
        - - !Ref ResourcesPrefix
          - !Ref Environment
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"    


# APIGW
  ApiGatewayEndpoint:
    DependsOn:
      - GetRecommendations
      - PutEvents
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Join
        - "-"
        - - !Ref ResourcesPrefix
          - !Ref Environment
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      Description: "Amazon Personalize Streaming Events Enpoint"
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "CostAllocationProduct"
          Value: !Ref CostAllocationProduct
        - Key: "ManagedBy"
          Value: !Ref ManagedBy
#Create the response model for you api
  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    DependsOn:
      - GetRecommendations
      - PutEvents
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayEndpoint
      Schema: {}


#API KEY
  APIKey:
    DependsOn:
      - apiGatewayDeployment
      - APIStage
    Type: "AWS::ApiGateway::ApiKey"
    Properties: 
      Description: "This is an API key"
      Enabled: true
      StageKeys:
      - RestApiId: !Ref ApiGatewayEndpoint
        StageName: !Ref StageName
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "CostAllocationProduct"
          Value: !Ref CostAllocationProduct
        - Key: "ManagedBy"
          Value: !Ref ManagedBy
  usagePlan:
    DependsOn:
      - APIKey
    #  - APIStage
    Type: 'AWS::ApiGateway::UsagePlan'
    Properties:
      ApiStages:
        - ApiId: !Ref ApiGatewayEndpoint
          Stage: !Ref APIStage
      Description: Customer ABC's usage plan
      UsagePlanName: 'se-usage-plan'
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "CostAllocationProduct"
          Value: !Ref CostAllocationProduct
        - Key: "ManagedBy"
          Value: !Ref ManagedBy
  usagePlanKey:
    DependsOn:
    #  - APIKey
      - APIStage
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyId: !Ref APIKey
      KeyType: API_KEY
      UsagePlanId: !Ref usagePlan

  APIStageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Join
        - "-"
        - - !Ref ResourcesPrefix
          - !Ref Environment
          - "APIGW"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
      RetentionInDays: !Ref LogRotation
  
  APIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: !Ref StageName
      AccessLogSetting: 
        DestinationArn: !GetAtt APIStageLogGroup.Arn
        Format: '$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId'
      Description: !Ref StageName
      MethodSettings: 
        - ResourcePath: "/*"
          HttpMethod: "*"
          MetricsEnabled: 'true'
          DataTraceEnabled: 'false'
          LoggingLevel: "INFO"
      RestApiId: !Ref "ApiGatewayEndpoint"
      DeploymentId: !Ref apiGatewayDeployment
      Tags:
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "CostAllocationProduct"
          Value: !Ref CostAllocationProduct
        - Key: "ManagedBy"
          Value: !Ref ManagedBy
  apiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - GetRecommendations
      - PutEvents
      - "LambdaGetRecommendationsMethod"
    Properties:
      RestApiId: !Ref "ApiGatewayEndpoint"

# Create /recommendations resource
  RecommendationsResource:
    Type: 'AWS::ApiGateway::Resource'
    DependsOn:
      - GetRecommendations
      - PutEvents
    Properties:
      RestApiId: !Ref ApiGatewayEndpoint
      ParentId: !GetAtt 
        - ApiGatewayEndpoint
        - RootResourceId
      PathPart: recommendations
# Integrate with your Get Recommendations Lambda
  LambdaGetRecommendationsMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn:
    #  - GetRecommendations
      - PutEvents
    Properties:
      ApiKeyRequired: "true"
      RestApiId: !Ref ApiGatewayEndpoint
      ResourceId: !Ref RecommendationsResource
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "GetRecommendations.Arn"
# Activate CORS
  RecommendationsCORESOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: "NONE"
      RestApiId: !Ref ApiGatewayEndpoint
      ResourceId: !Ref RecommendationsResource
      HttpMethod: "OPTIONS"
      Integration:
        Type: "MOCK"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: "WHEN_NO_MATCH"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            'application/json': 'Empty'
          ResponseParameters:
            'method.response.header.Access-Control-Allow-Headers': 'false'
            'method.response.header.Access-Control-Allow-Methods': 'false'
            'method.response.header.Access-Control-Allow-Origin': 'false'
# Deploy your API endpoint


# Create the invoke permissions
  recommendationsLambdaApiGatewayInvokeGET:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    #  - GetRecommendations
      - PutEvents
      - apiGatewayDeployment
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "GetRecommendations.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayEndpoint}/*/POST/recommendations"
  

  GetRecommendationsErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:PersonalizeMonitorNotifications"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref GetRecommendations
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: '1'
  PutContentErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:PersonalizeMonitorNotifications"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PutContent
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: '1'
  PutEventsErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:PersonalizeMonitorNotifications"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PutEvents
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: '1'
      
  PutContentThrottlesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:PersonalizeMonitorNotifications"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PutContent
      EvaluationPeriods: 1
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: '1'
  PutEventsThrottlesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:PersonalizeMonitorNotifications"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PutEvents
      EvaluationPeriods: 1
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: '1'    

  RecThrottlesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:PersonalizeMonitorNotifications"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref GetRecommendations
      EvaluationPeriods: 2
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: '1'
    

  EventsIteratorAge:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:PersonalizeMonitorNotifications"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PutEvents
      EvaluationPeriods: 2
      MetricName: IteratorAge
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Maximum
      Threshold: !Ref LambdaIteratorAgeAlarm
      
  ContentIteratorAge:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:PersonalizeMonitorNotifications"
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref PutContent
      EvaluationPeriods: 1
      MetricName: IteratorAge
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Maximum
      Threshold: !Ref LambdaIteratorAgeAlarm
      
  PenronalizeDashboard:
   Type: AWS::CloudWatch::Dashboard
   Properties:
     DashboardName:  !Join
        - "-"
        - - !Ref ResourcesPrefix
          - !Ref Environment
          - "Dashboard"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
     DashboardBody: !Sub |
      {
        "widgets": [
            {
                "height": 6,
                "width": 24,
                "y": 6,
                "x": 0,
                "type": "metric",
                "properties": {
                    "metrics": [
                        [ "AWS/Lambda", "Throttles", "FunctionName", "${GetRecommendations}", { "color": "#ff7f0e" } ],
                        [ ".", "Errors", ".", ".", { "color": "#d62728" } ],
                        [ ".", "Invocations", ".", "." ],
                        [ ".", "Duration", ".", ".", { "yAxis": "right", "stat": "Average", "color": "#aec7e8" } ]
                    ],
                    "view": "timeSeries",
                    "stacked": false,
                    "region": "${AWS::Region}",
                    "stat": "Sum",
                    "period": 300,
                    "title": "GetRecommendations Lambda"
                }
            },
            {
                "height": 6,
                "width": 24,
                "y": 12,
                "x": 0,
                "type": "metric",
                "properties": {
                    "metrics": [
                      [ "PersonalizeCustomMetrics", "PersonalizeRequestTime", "ServiceName", "GetRecommendations", "LogGroup", "${GetRecommendations}", "ServiceType", "AWS::Lambda::Function", { "stat": "Average" } ],
                      [ "PersonalizeCustomMetrics", "DynamoSophi2ReuqestTime", "ServiceName", "GetRecommendations", "LogGroup", "${GetRecommendations}", "ServiceType", "AWS::Lambda::Function", { "stat": "Average" } ],
                      [ "PersonalizeCustomMetrics", "DynamoSophi3ReuqestTime", "ServiceName", "GetRecommendations", "LogGroup", "${GetRecommendations}", "ServiceType", "AWS::Lambda::Function", { "stat": "Average" } ] 
                    ],
                    "view": "timeSeries",
                    "stacked": true,
                    "region": "",
                    "stat": "Average",
                    "period": 300,
                    "title": "GetRecommendations Dependency"
                }
            },          
            {
                "height": 6,
                "width": 12,
                "y": 18,
                "x": 0,
                "type": "metric",
                "properties": {
                    "metrics": [
                        [ "AWS/Lambda", "Throttles", "FunctionName", "${PutEvents}", { "color": "#ff7f0e" } ],
                        [ ".", "Errors", ".", ".", { "color": "#d62728" } ],
                        [ ".", "Invocations", ".", "." ],
                        [ ".", "Duration", ".", ".", { "yAxis": "right", "stat": "Average", "color": "#aec7e8" } ]
                    ],
                    "view": "timeSeries",
                    "stacked": false,
                    "region": "${AWS::Region}",
                    "stat": "Sum",
                    "period": 300,
                    "title": "PutEvents Lambda"
                }
            },
            {
                "height": 6,
                "width": 12,
                "y": 18,
                "x": 12,
                "type": "metric",
                "properties": {
                    "metrics": [
                        [ "AWS/Lambda", "Throttles", "FunctionName", "${PutContent}", { "color": "#ff7f0e" } ],
                        [ ".", "Errors", ".", ".", { "color": "#d62728" } ],
                        [ ".", "Invocations", ".", "." ],
                        [ ".", "Duration", ".", ".", { "yAxis": "right", "stat": "Average", "color": "#aec7e8" } ]
                    ],
                    "view": "timeSeries",
                    "stacked": false,
                    "region": "${AWS::Region}",
                    "stat": "Sum",
                    "period": 300,
                    "title": "PutContent Lambda"
                }
            },
            {
                "height": 6,
                "width": 12,
                "y": 24,
                "x": 0,
                "type": "metric",
                "properties": {
                    "metrics": [
                        [ "AWS/Lambda", "IteratorAge", "FunctionName", "${PutEvents}", { "color": "#ff7f0e" } ]
                    ],
                    "view": "timeSeries",
                    "stacked": true,
                    "region": "${AWS::Region}",
                    "stat": "Maximum",
                    "period": 60,
                    "title": "PutEvents Lambda IteratorAge",
                    "annotations": {
                        "horizontal": [
                            {
                                "label": "Alarm",
                                "value": ${LambdaIteratorAgeAlarm}
                            }
                        ]
                    }
                }
            },
            {
                "height": 6,
                "width": 12,
                "y": 24,
                "x": 12,
                "type": "metric",
                "properties": {
                    "metrics": [
                        [ "AWS/Lambda", "IteratorAge", "FunctionName", "${PutContent}", { "color": "#ff7f0e" } ]
                    ],
                    "view": "timeSeries",
                    "stacked": true,
                    "region": "${AWS::Region}",
                    "stat": "Maximum",
                    "period": 60,
                    "title": "PutContent Lambda IteratorAge",
                    "annotations": {
                        "horizontal": [
                            {
                                "label": "Alarm",
                                "value": ${LambdaIteratorAgeAlarm}
                            }
                        ]
                    }
                }
            },
            {
                "type": "alarm",
                "x": 0,
                "y": 30,
                "width": 24,
                "height": 3,
                "properties": {
                    "title": "Lambda Alarm Status",
                    "alarms": [
                        "${GetRecommendationsErrorAlarm.Arn}",
                        "${RecThrottlesAlarm.Arn}",
                        "${PutContentErrorAlarm.Arn}",
                        "${PutContentThrottlesAlarm.Arn}",
                        "${PutEventsErrorAlarm.Arn}",
                        "${PutEventsThrottlesAlarm.Arn}",
                        "${ContentIteratorAge.Arn}",
                        "${EventsIteratorAge.Arn}"
                    ]
                }
            },
            {
                "type": "metric",
                "x": 0,
                "y": 0,
                "width": 24,
                "height": 6,
                "properties": {
                    "metrics": [
                        [ "AWS/ApiGateway", "4XXError", "ApiName", "tgam-personalize-dev-39464c60", "Stage", "${StageName}" ],
                        [ ".", "5XXError", ".", ".", ".", "." ],
                        [ ".", "Latency", ".", ".", ".", ".", { "yAxis": "right", "stat": "Average" } ],
                        [ ".", "Count", ".", ".", ".", "." ],
                        [ ".", "IntegrationLatency", ".", ".", ".", ".", { "stat": "Average", "yAxis": "right" } ]
                    ],
                    "view": "timeSeries",
                    "stacked": false,
                    "region": "${AWS::Region}",
                    "stat": "Sum",
                    "period": 300,
                    "title": "Api Gateway Metrics"
                }
            }
        ]
      }
         
# Outputs:
Outputs:
  GetRecommendations:
    Value: !Ref GetRecommendations
  PutContent:
    Value: !Ref PutContent
  PutEvents:
    Value: !Ref PutEvents
  POSTRecommendationsApiGatewayInvokeURL:
    Value: !Sub "https://${ExternalDomain}/${StageName}/recommendations"
  APIKEY:
    Value: !Sub "https://console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/api-keys/${APIKey}"